template <class Object>
bool dupTestList(const vector<Object>& vec) {
	list<Object> l;
	//list<Object>::const_iterator litr = l.begin(); 
	for (int i = 0; i < vec.size(); i++) {
		l.insert(l.begin(), vec[i]);
	}
	for (list<Object>::iterator i = l.begin(); i != l.end(); i++) {
		list<Object>::iterator j = i;
		j++;
		if (j != l.end()) {
			for (; j != l.end(); j++) {
				if (*i == *(j)) return true;
			}
		}
	}
	return false;
}

bool dupTestSort(vector<Object>& vec) {
	if (vec.size() <= 2) return false;
	sort(vec.begin(), vec.end());
	for (vector<Object>::iterator i = vec.begin() + 1; i != vec.end(); i++) {
		if (*i == *(i - 1)) return true;
	}
	return false;
}

template <class Object>
bool dupTestSet(const vector<Object>& vec) {
	set<Object> dupSet; 
	pair<set<Object>::iterator, bool> returnFromInsert;
	for (int i = 0; i < vec.size(); i++) {
		returnFromInsert = dupSet.insert(vec[i]);
		if (!returnFromInsert.second) return true;
	 }
	return false;
}

template <class Object>
bool dupTestUnorderedSet(const vector<Object>& vec) {
	unordered_set<Object> dupSet;
	pair<unordered_set<Object>::iterator, bool> returnFromInsert;
	for (int i = 0; i < vec.size(); i++) {
		returnFromInsert = dupSet.insert(vec[i]);
		if (!returnFromInsert.second) return true;
	}
	return false;
}
